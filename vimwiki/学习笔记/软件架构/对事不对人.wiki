= 对事不对人 =

== 实际问题 ==
- Q: ~~你在这个设计上投入了很多精力，为他付出很多心血。你坚信它比其他任何人的设计都棒。别听他们的，他们只会把问题变得更糟糕。~~
- A: 下面我们来看看对一个明显的错误有哪些常见的反应。
    - 否定个人能力。
    - 指出明显的缺点，并否定其观点。
    - 询问你的队友，并提出你的顾虑。
- *第一种方法是不可能成功的。即使Lee先生是一个十足的笨蛋，很小的问题也搞不定，但你那样指出问题根本不会对他的水平有任何的提高，反而会导致他以后再也不会提出自己的任何想法了。*
- *第二种方法至少观点明确，但也不能给Lee太多的帮助，甚至可能会让你自己惹火上身。也许Lee能巧妙地回复你对非线程安全的职责：“哦，不过它不需要多线程。因为他只在Frozbot模块的环境中使用，它已经运行在自己的线程中了。”哎哟！忘记了Frozbot这一茬了。现在该是你觉得自己蠢了，Lee也会因为你骂他笨蛋而生气。*
- *第三种方法。没有谴责，没有评判，只是简单的表达自己的观点。让Lee自己意识到这个问题，而不是扫他的面子。由此可以开始一次交谈，而不是争辩。*

== 切身感受 ==
{{{class="brush:text"
    一个团队能够很公正地讨论一些方案的优点和缺点，你不会因为拒绝了有太多缺点的方案而伤害别人，也不会因为采纳了某个不甚完美（但是更好的）解决方案而被人忌恨。
}}}

== 平衡的艺术 ==
- 尽力贡献自己的好想法，如果你的想法没有被采纳也无需生气。不要因为只是想体现自己的想法而对拟定的好思路画蛇添足。
- 脱离实际的反观点会使争论变味。若对一个想法有成见，你很容易提出一堆不太可能发生或者不太实际的情形去批驳它。这时，清先扪心自问：类似问题以前发生过吗？是否经常发生？
- 也就是说，想这样说是不够的：我们不能采用这个方案，因为数据库厂商可能会倒闭。或者：用户绝对不会接受那个方案。你必须要评判那些场景发生的可能性有多大。想要支持或者反驳一个观点，有时候你必须先做一个原型或者调查出它有多少的同意者或者反对者。
- 只有更好，没有最好。尽管“最佳实践”这个术语到处在用，但实际上不存在“最佳”，只有在某个特定条件下更好的实践、不带个人情绪并不是要盲目地接受所有的观点。用合适的词和理由去解释为什么你不赞同这个观点或方案，并提出明确的问题。
