= 欲速则不达 =

== 实际问题 ==
- Q: ~~"你不需要真正地理解那块代码,它只要能够工作就可以了.哦,它需要一个小小的调整.只要在结果中再加上几行代码,它就可以工作了.干吧!就把那几行代码加进去,它应该可以工作."~~ 
- A: *拙劣的代码工人会这样不假思索地改完代码，然后快速转向下一个问题。优秀的程序员会挖掘更深一层，尽力去理解为什么这里必须要加1,更重要的是,他会想明白会产生什么其他影响。*

== 切身感受 ==
{{{class="brush:text" 
    在项目中，代码应该是很亮堂的，不应该有黑暗死角。你也许不知道每块代码的每个细节，或者每个算法的每个步骤，但是你对整体的相关知识有很好的了解。
没有任何一块代码被警戒线或者"切勿入内"的标志隔离开。
}}}

== 平衡的艺术 ==
- 你必须要理解一块代码是如何工作的，但是不一定需要成为一位专家。只要你能使用它进行有效的工作就足够了，不需要把它当作毕业生事业。
- 如果有一位团队成员宣布，有一块代码其他人都很难看懂，这就意味着任何人(包括原作者)都很难维护它，请让它变得简单些。
- 不要急于修复一段没能真正理解的代码.这种+1/-1的病症始于无形,但是很快就会让代码一团糟.要解决真正的问题,不要治标不治本。
- 所有的大型系统都非常复杂,因此没有一个人能完全明白所有的代码.除了深入了解你正在开发的那部分代码之外,你还需要从更高的层面来了解大部分代码的功能，这样就可以理解系统各个功能块之间都是如何交互的。如果系统的代码已经恶化，可以阅读第23页习惯4中给出的建议。
